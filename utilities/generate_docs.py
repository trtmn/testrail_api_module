#!/usr/bin/env python3
"""
Script to generate documentation for the TestRail API module using pdoc.
"""
import subprocess
import sys
from pathlib import Path


def get_version() -> str:
    """Get the current version from the module."""
    try:
        # Add src to path to import the module
        src_path = Path(__file__).parent.parent / "src"
        sys.path.insert(0, str(src_path))
        
        from testrail_api_module import __version__
        return __version__
    except ImportError as e:
        print(f"‚ùå Error importing version: {e}")
        sys.exit(1)


def create_version_file(project_root: Path, version: str) -> None:
    """Create a version file for pdoc to include in documentation."""
    version_file = project_root / "src" / "testrail_api_module" / "_version.py"
    
    version_content = f'''"""
Version information for the TestRail API module.
This file is auto-generated by the documentation generation script.
"""

__version__ = "{version}"
"""
The current version of the TestRail API module.
"""

VERSION = __version__
"""
The current version of the TestRail API module.
"""
'''
    
    with open(version_file, 'w') as f:
        f.write(version_content)
    
    print(f"üìù Created version file: {version_file}")


def cleanup_version_file(project_root: Path) -> None:
    """Remove the temporary version file."""
    version_file = project_root / "src" / "testrail_api_module" / "_version.py"
    if version_file.exists():
        version_file.unlink()
        print(f"üßπ Cleaned up version file: {version_file}")


def main() -> None:
    """Generate documentation using pdoc."""
    # Get the project root directory (utilities/../)
    project_root = Path(__file__).parent.parent
    
    # Get current version
    version = get_version()
    print(f"üì¶ Current version: {version}")
    
    # Create version file for documentation
    create_version_file(project_root, version)
    
    # Remove existing docs directory
    docs_dir = project_root / "docs"
    if docs_dir.exists():
        print("Removing existing docs directory...")
        subprocess.run(["rm", "-rf", str(docs_dir)], check=True)

    # Generate new documentation
    print("Generating documentation with pdoc...")
    try:
        subprocess.run(
            [
                "pdoc",
                "--output-directory",
                str(docs_dir),
                "--docformat",
                "google",
                "--show-source",
                "--search",
                "--footer-text",
                f"TestRail API Module v{version}",
                str(project_root / "src" / "testrail_api_module"),
            ],
            check=True,
        )
        print("‚úÖ Documentation generated successfully!")
        print(f"üìÅ Documentation is available in: {docs_dir}")
        print(
            f"üåê Open {docs_dir / 'testrail_api_module' / 'index.html'} "
            f"in your browser to view it."
        )
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error generating documentation: {e}")
        sys.exit(1)
    finally:
        # Clean up the temporary version file
        cleanup_version_file(project_root)


if __name__ == "__main__":
    main()
